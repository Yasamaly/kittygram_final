name: CI/CD Kittygram

on:
  push:
    branches: [main]

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      # Шаг 1: Получение кода из репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Настройка Python
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Шаг 3: Установка системных зависимостей для Pillow
      - name: Install Pillow dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libjpeg-dev \
            zlib1g-dev \
            libtiff5-dev \
            libfreetype6-dev \
            libwebp-dev

      # Шаг 4: Кэширование зависимостей Python
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('backend/requirements.txt') }}

      # Шаг 5: Линтинг кода
      - name: Run Ruff linter
        run: |
          pip install ruff
          ruff check backend/

      # Шаг 6: Запуск тестов Django
      - name: Run Django tests
        run: |
          pip install -r backend/requirements.txt
          python backend/manage.py test

      # Шаг 7: Настройка Node.js
      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Шаг 8: Кэширование node_modules
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: node-${{ hashFiles('frontend/package-lock.json') }}

      # Шаг 9: Тесты фронтенда
      - name: Run frontend tests
        run: |
          cd frontend
          npm ci
          npm test

      # Шаг 10: Сборка и публикация Docker-образов
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push Backend
        run: |
          docker build -t ${{ env.DOCKERHUB_USER }}/kittygram_backend:latest -f backend/Dockerfile .
          docker push ${{ env.DOCKERHUB_USER }}/kittygram_backend:latest

      - name: Build and push Frontend
        run: |
          docker build -t ${{ env.DOCKERHUB_USER }}/kittygram_frontend:latest -f frontend/Dockerfile .
          docker push ${{ env.DOCKERHUB_USER }}/kittygram_frontend:latest

      - name: Build and push Nginx
        run: |
          docker build -t ${{ env.DOCKERHUB_USER }}/kittygram_gateway:latest -f nginx/Dockerfile .
          docker push ${{ env.DOCKERHUB_USER }}/kittygram_gateway:latest

      # Шаг 11: Уведомления в Telegram
      - name: Notify Telegram (Success)
        if: ${{ success() }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage" \
            -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" \
            -d "text=✅ CI/CD успешно завершён! Образы обновлены."

      - name: Notify Telegram (Failure)
        if: ${{ failure() }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage" \
            -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" \
            -d "text=❌ Ошибка в CI/CD! Проверьте выполнение workflow."
